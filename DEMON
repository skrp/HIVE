#!/usr/local/bin/perl
use strict; use warnings;
use Const::Fast 'const';
use Time::HiRes;
use Digest::SHA 'sha256_hex';
use POSIX;
use File::Path; 
use File::Copy;
use File::LibMagic;
######################################################
# DEMON - daemon summoning scroll

# INIT ###############################################
my ($path) = @ARGV;
if (not defined $path) { die ('NO ARGV1 dir'); }
if (substr($path, -1) ne "/") { $path .= '/'; }

# BIRTH ##############################################
die "STILLBORN" if ((my $birth = daemon()) != 0);

# DIRS ###############################################
# sea/ : blkr()
# key/ : key()
# cemetery/ : tombstone()
# g/ : XS()
# pool/ : XS()
# DIO : DEMON CHK-IN CHK-OUT

# GLOBAL CONST #######################################
const my $PATH => $path;
const my $NAME => name();
const my $BIRTH => gmtime();
const my $QUE => $NAME.'_que';
const my $DUMP => $NAME.'_dump/';
const my $TOMB => $PATH.'cemetery/'.$NAME;
const my $SLEEP => $NAME.'_SLEEP';
const my $SUICIDE => $NAME.'_SUICIDE';
const my $SIZE => 128000;
const my $RATE => 100;
const my @API => (
	'fs_pop', 'fs_chkmeta', 'fs_index', 'fs_blkr', 
	'fs_build', 'fs_sha', 'fs_xtrac','fs_bkup',
	'xs_arki','xs_arx', 'xs_neo', 'rgex', 'xs_get',
	'k_krip', 'k_dkrip',
	'sec_snort', 'sec_troll', 'sec_perlparselog', 
	'sec_dtracesig'
);
# GLOBAL VARIABLE ####################################
my $YAY = 0;

# PREP ###############################################
chdir('/tmp/');

mkdir $DUMP or die "$DUMP FAIL\n";
open(my $Lfh, '>>', $TOMB);
$Lfh->autoflush(1);
dio('IN');
printf $Lfh ("HELLOWORLD %s\n", TIME());
while (1)
{ # WORK ################################################
	unless (-e $QUE)
		{ sleep 3600; next; }
	open(my $qfh, '<', $QUE);
	my @QUE = readline $qfh; chomp @QUE;

	# $QUE[0] = api; $QUE[1] = iteration; $QUE[$ttl] = interation;
	my $api = shift @QUE; 
	next if (api($api, $qfh) < 0);
	
	my $ttl = @QUE; 
	my $count = 0;

	foreach my $i (@QUE)
	{
		if (-e $SUICIDE)
    			{ SUICIDE(); }
		if (-e $SLEEP)
   	 		{ SLEEP(); }
		my $i_start = gettimeofday();
		&$api($i);
		printf $Lfh "%.3f %s\n", gettimeofday()-$i_start, $i;
		$count++;
		tombstone($api, $count, $ttl) if ($count % $RATE == 0);
	}
}
# SUB ###########################################################
sub daemon {
   die "FAIL daemon1 $!\n" if ((my $pid = fork()) < 0);
   if ($pid != 0)
   	{ exit(0); }
   POSIX::setsid() or die "FAIL setsid $!";
   die "FAIL daemon2 $!\n" if ((my $pid2 = fork()) < 0);
   if ($pid2 != 0)
   	{ exit(0); }
   chdir('/tmp');
   umask 0;
   my $fds = 3;
   while ($fds < 1024)
      { POSIX::close($fds); $fds++;  }
   my $des = '/dev/null';
   open(STDIN, "<$des");
   open(STDOUT, ">$des");
   open(STDERR, ">$des");
   return 0;
}
sub api
{
	my ($api, $qfh) = @_;
	print $Lfh "api $api\n";
	unless (/$api/, @API)
	{
		print $Lfh "FAIL_API $api\n";
		close $qfh; 
		move($QUE, $PATH.'cemetery/zombie_'.$NAME);
		return -1;
	}
	return 0;	
}
sub SUICIDE
{
	my ($api, $count, $ttl) = @_;
	unlink $SUICIDE;
	printf $Lfh ("FKTHEWORLD %s\n", TIME());
	dio('OUT');
	tombstone($api, $count, $ttl);
	exit;
}
sub SLEEP
{
	my ($api, $count, $ttl) = @_;
	open(my $Sfh, '<', $SLEEP);
	my $timeout = readline $Sfh; chomp $timeout;
	print $Lfh ("$SLEEP %s %s\n", $timeout, TIME());
	close $Sfh; unlink $SLEEP;
	tombstone($api, $count, $ttl);
	sleep $timeout;
}
sub TIME
{
	my $t = localtime;
	my $mon = (split(/\s+/, $t))[1];
	my $day = (split(/\s+/, $t))[2];
	my $hour = (split(/\s+/, $t))[3];
	my $time = $mon.'_'.$day.'_'.$hour;
	return $time;
}
sub name
{
	my $id = int(rand(999));
	my $name = $$.'_'.$id;
	return $name;
}
sub tombstone
{
	my ($api, $count, $ttl) = @_;
	
	open(my $LLfh, '<', $TOMB);
	my @llfh = readline $LLfh;
	my @yay = grep { /^YAY / } @llfh; 
	my $yay = @yay;
	my @FACE;
	$FACE[0] = $NAME;	
	$FACE[1] = ((gmtime() - $BIRTH) / 60);
	$FACE[2] = $api.'_'.$yay.'_'.$count.'_'.$ttl;
	
	open(my $Tfh, '>>', $TOMB); 
	printf $Tfh ("%d %s %d %s\n", $YAY, $FACE[0], $FACE[1], $FACE[2]);
}
sub dio
{
	my $status = (@_);
	my $path = $PATH.'cemetery/DIO'
	open(my $Dfh, '>>', $path);
	printf $Dfh ("%s %s\n", $status, TIME());
	close $Dfh;
}
