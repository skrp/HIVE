#!/usr/local/bin/perl
use strict; use warnings;
# FreeBSD Only
# unix or you a bitch-button-smash-hack hacker

########################################################
#                HIVE OVER NFS                         #
# DEMON          t_'(o_0)"'      daemon summons scroll #
########################################################

use Const::Fast 'const';
use Digest::SHA 'sha256_hex';
use POSIX;
use File::Path;
use File::Copy;
use File::LibMagic;
use Sys::Hostname 'hostname';
use LWP::UserAgent;
use LWP::Protocol::https;
use Archive::Any;

# STRUCT #######################################
# /tmp/$NAME/ : host work dir
# /tmp/PING : host PID roster

# /HIVE/ : net nfs mount
# /HIVE/PING : net PID roster
# /HIVE/cemetery/ : net DEMON memorial (logs)
# /HIVE/node/ : node specific dir
# /HIVE/node/$hostname/que/ : net api-que

# /nfsdump/pool/ : net data dump
# /nfsdump/g/ : net metadata dump

# LOGIC
#	-que

# HOST-AWARENESS
#	-log_begin()

# NET-COMM [[ pause, kill, stdout, PID, host_side-dump, bandwidth ]]
#	-nfsn   network_input
#	-nfso   network_output
#	-nfsc   network_command

# PREP @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# BIRTH
die "STILLBORN" if ((my $birth = daemon()) != 0);

# GLOBAL CONST
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#const my $NFSPID => $NFSPATH.PING; # life beat (creates PID that is removed by chron every hour)
#const my $REP => $TOMB.'REP_'.$NAME; # metrics
# HOST LOG VARIABLES
#const my @pf => ('PID_LOG_packets_raw', 'PID_LOG_invalid_input', 'PID_LOG_invalid_output', 'PID_LOG_packet_io', 'PID_LOG_net_io');
#const my @dtrace => ('PID_LOG_cpu_io', 'PID_LOG_fs_io', 'PID_LOG_syscall_io');
#const my @unix => ('PID_LOG_top', 'PID_LOG_ps', 'PID_LOG_netstat', 'PID_LOG_zfs', 'PID_LOG_gpart', 'PID_LOG_camcontrol', 'PID_LOG_iostat', 'PID_LOG_io');
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

const my $NAME => name(); # uniq process name

# HOST VARIABLES
const my $NODE => hostname(); # node name
const my $DUMP => $NAME.'_dump/'; # unique process hostside dump
const my $HPING => '/tmp/PING';

# NET VARIABLES
const my $NFSPATH => '/HIVE/';
const my $NFSPING => $NFSPATH.'PING';
const my $QUE => $NFSPATH.$NODE.'/'; # node path
const my $TOMB => $NFSPATH.'cemetery/'; # DEMON logs
const my $TOMBSTONE => $TOMB.$NAME;
# NET LOG VARIABLES
const my $RAW => $TOMB.'RAW_'.$NAME; # output
const my $TODO => $TOMB.'TODO_'.$NAME; # leftovers that need to be put back in $QUE
const my $DONE => $TOMB.'DONE_'.$NAME; # successful iterations
const my $FAIL => $TOMB.'FAIL_'.$NAME; # failed iterations that need to be cleaned up
const my $ZOMBIE => $TOMB.'ZOMBIE_'.$NAME; # fails path of api_verify()
# NET CONTROL VARIABLES
const my $SLEEP => $TOMB.'SLEEP_'.$NAME; # triggers sleep
const my $SUICIDE => $TOMB.'SUICIDE_'.$NAME; # triggers suicide

# DEMON VARIABLES
const my $BIRTH => time();
const my $RATE => 100;
const my $SIZE => 128000; # BLKR
const my $UA => uagent(); # GET

# DATA DUMP VARIABLES
const my $DUMPPATH => '';
die "code needs nfs dump location" if (!defined $DUMPPATH);
#const my $POOL => $DUMPPATH.'pool/'; # remote nfs dump
const my $POOL => '/pool/'; # remote nfs dump
#const my $G => $DUMPPATH.'g/'; # remote nfs dump
const my $G => '/g/'; # remote nfs dump

# DISPATCH TABLE ##########################################
const my %api_hash => ( get => \&get, xtrac => \&xtrac, blkr => \&blkr, krip => \&krip, regx => \&regex, sha => \&sha );
const my @API => ('get','blkr','sha', 'krip', 'xtrac', 'regx');

# DEMON GLOBAL SUCCESS-COUNT
my $YAY = 0;

# [[ nfso ]]
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# log_begin();
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

chdir('/tmp/');
$SIG{INT} = \&SUICIDE;

###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#$SIG{HUP} = \&ch_que;
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

mkdir $DUMP or die "$DUMP FAIL\n";

open(my $Lfh, '>>', $RAW);
open(my $FAILfh, '>>', $FAIL);
open(my $DONEfh, '>>', $DONE);
open(my $TODOfh, '>>', $TODO);
$Lfh->autoflush(1);
$FAILfh->autoflush(1);
$DONEfh->autoflush(1);
$TODOfh->autoflush(1);

h_ping(); # host roster
n_ping(); # net roster (life beat)

printf $Lfh ("HELLOWORLD %s\n", TIME());

# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

# LIVE &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

while (1)
{
# [[ nfsn ]]
	my ($api, @QUE) = que_up();
	if (!defined $api)
		{ sleep 3600; next; }

# [[ nfsc ]]
	# verify api
	next if (api_verify($api, @QUE) < 0);

	my $ttl = @QUE;
	print $Lfh "api $api ttl $ttl\n";

	my $count = 0;
	foreach my $i (@QUE)
	{
		if (-e $SLEEP)
   	 		{ SLEEP($api, $count, $ttl, @QUE); }
		print $Lfh "$i\n";
		$api_hash{$api}->($i);

		if ($count % $RATE == 0)
		{
			tombstone($api, $count, $ttl);
			que_flush(@QUE, $count);
			n_ping();
		}
		$count++;
# &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	}
	unlink $TODO;
}

# CORE SUBS ///////////////////////////////////////////////////////////
sub daemon {
  	die "FAIL daemon1 $!\n" if ((my $pid = fork()) < 0);
   	if ($pid != 0)
   		{ exit(0); }
   	POSIX::setsid() or die "FAIL setsid $!";
   	die "FAIL daemon2 $!\n" if ((my $pid2 = fork()) < 0);
  	if ($pid2 != 0)
   		{ exit(0); }
	chdir('/tmp');
   	umask 0;
   	my $fds = 3;
  	while ($fds < 1024)
   	 	{ POSIX::close($fds); $fds++;  }
   	my $des = '/dev/null';
   	open(STDIN, "<$des");
   	open(STDOUT, ">$des");
   	open(STDERR, ">$des");
   	return 0;
}
sub que_flush
{
	my (@QUE, $count) = @_;
	open(my $TODOfh, '>', $TODO);
	print $TODOfh "$count\n";
	foreach (@QUE)
		{ print $TODOfh "$_\n"; }
	close $TODOfh;
}
sub SUICIDE
{
	my ($api, $count, $ttl, @QUE) = @_;
	unlink $SUICIDE;
	printf $Lfh ("FKTHEWORLD %s\n", TIME());
	dio('OUT');
	tombstone($api, $count, $ttl);
	que_flush(@QUE, $count);
	exit;
}
sub SLEEP
{
	my ($api, $count, $ttl, @QUE) = @_;
	open(my $Sfh, '<', $SLEEP);
	my $timeout = readline $Sfh; chomp $timeout;
	print $Lfh ("$SLEEP %s %s\n", $timeout, TIME());
	close $Sfh; unlink $SLEEP;
	SUICIDE($api, $count, $ttl, @QUE) if ($timeout eq "SUICIDE");
	tombstone($api, $count, $ttl);
	sleep $timeout;
}
sub TIME
{
	my $t = localtime;
	my $mon = (split(/\s+/, $t))[1];
	my $day = (split(/\s+/, $t))[2];
	my $hour = (split(/\s+/, $t))[3];
	my $time = $mon.'_'.$day.'_'.$hour;
	return $time;
}
sub name
{
	my $id = int(rand(999));
	my $name = $$.'_'.$id;
	return $name;
}
sub tombstone
{
	my ($api, $count, $ttl) = @_;
	my @FACE;
	$FACE[0] = $NAME;
	my $Ttime = time();
	$FACE[1] = ((($Ttime - $BIRTH)/60)/60);
	$FACE[2] = $api.'_'.$count.'_'.$ttl;
	open(my $Tfh, '>>', $TOMBSTONE);
	printf $Tfh ("%d %s %d %s\n", $FACE[1], $YAY, $FACE[0], $FACE[2]);
}
sub api_verify
{
	my ($api, @QUE) = @_;

	for my $api_value (@API)
	{
		if ($api =~ m/$api_value/)
			{ return 0; }
	}
	print $Lfh "FAIL_API $api\n";
	zombie(@QUE);
	return -1;
}
sub zombie
{
	my (@QUE) = @_;
  	my $id = int(rand(999));
	my $zpath = $ZOMBIE.$id;
	open(my $zfh, '>', $zpath);
	for (@QUE)
		{ print $zfh "$_\n"; }
	close $zfh;
}
sub que_p
{
  	opendir(my $dh, $QUE);
 	my @ls = readdir($dh);
  # skip $ls[0] = . ; $ls[1] = ..;
  	my $que_path = $QUE.$ls[2];
	print $Lfh "$que_path\n";
  	return $que_path;
}
sub que_up
{
  	my $que_path = que_p();
	open(my $qfh, '<', $que_path);
	my @QUE = readline $qfh;
  	chomp @QUE; close $qfh;
	unlink $que_path;

	my $api = shift @QUE;
	print $Lfh "$api\n";
	return ($api, @QUE );
}
# AWARENESS
#sub log_begin
#{
#	for my $script (@pf)
#		{ `perl $script $NAME &`; }
#	for my $script (@dtrace)
#		{ `perl $script $NAME &`; }
#	for my $script (@unix)
#		{ `perl $script $NAME &`; }
#}
# COMMUNICATION
sub h_ping
{ # host roster
	open(my $Pfh, '>>', $HPING);
	printf $Pfh ("%s %s ping!\n", TIME(), $$);
	close $Pfh;
}
sub n_ping
{ # net roster
	open(my $Dfh, '>>', $NFSPING);
	printf $Dfh ("%s %s %s\n", TIME(), $NAME, $NODE);
	close $Dfh;
}
# XTRACTION & STANDARDIZE
sub XS
{
	my ($file) = shift;
	my ($sha) = file_digest($file) or die "couldn't sha $file";
	File::Copy::copy($file, $POOL.$sha);
	my $cur = $G.$sha;
	open(my $fh, '>>', $cur) or die "Meta File Creation FAIL $file";
	printf $fh "%s\n%s\n%s\n%s\n",
		xsname($file),
		xspath($file),
		xssize($file),
		file_mime_encoding($file);
}
sub file_digest {
	my ($file) = @_;
	my $digester = Digest::SHA->new('sha256');
	$digester->addfile( $file, 'b' );
	return $digester->hexdigest;
}
sub xsname {
	my ($file) = @_;
	$file =~ s?^.*/??;
	return $file;
}
sub xspath {
	my ($file) = @_;
	$file =~ s?/?_?g;
	return $file;
}
sub file_mime_encoding {
	my ($file) = @_;
	my $magic = File::LibMagic->new();
	my $info = $magic->info_from_filename($file);
	my $des = $info->{description};
	$des =~ s?[/ ]?.?g;
	$des =~ s/,/_/g;
	my $md = $info->{mime_type};
	$md =~ s?[/ ]?.?g;
	my $enc = sprintf("%s %s %s", $des, $md, $info->{encoding});
	return $enc;
}
sub xssize {
	my ($file) = @_;
	my $size = -s $file;
	return $size;
}
sub uagent
{
	my $s_ua = LWP::UserAgent->new(
		agent => "Mozilla/50.0.2",
		from => 'punxnotdead',
		timeout => 45,
	);
	return $s_ua;
}
# ///////////////////////////////////////////////////////////

# LOGIC %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sub get
{
	my ($i) = @_;
	my $iname = $i; $iname =~ s|.*/||;
	my $tmp = $DUMP.$iname;
	my $response = $UA->get($i, ':content_file'=>"$tmp");
	print $Lfh "YAY $i\n"; $YAY++;
	if (-e $tmp)
	{
		print $Lfh "YAY $i\n"; $YAY++;
		XS($tmp) && unlink($tmp);
	}
	else
		{ print $FAILfh "$i\n"; }
}
sub blkr
{
	my ($i) = @_;
	my $block = 0;
	my $ipath = $NFSPATH.'pool/'.$i;
	open(my $ifh, '<', "$ipath") || print $Lfh "Cant open $i: $!\n";
	binmode($ifh);

	while (read($ifh, $block, $SIZE))
	{
		my $bsha = sha256_hex($block);
		my $bname = $NFSPATH.'sea/'.$bsha;
		open(my $fh, '>', "$bname");
		binmode($fh);
		print $fh $block;
		key($i, $bsha);
	}
	$YAY++;
}
sub key
{
	my ($i, $bsha) = @_;
	my $kpath = $NFSPATH.'key/'.$i;
	open(my $kfh, '>>', "$kpath");
	print $kfh "$bsha\n";
}
sub sha
{
	my ($i) = @_;
	my ($sha) = file_digest($i);
	if ($sha ne $i)
		{ print $Lfh "ERK $i ne $sha\n"; }
	$YAY++;
}
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
sub regx
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
	my ($i) = @_;
	open(my $fh, '<', $i);
	open(my $mfh, '<', $NFSPATH);
	my @i = readline $fh; chomp @i;
	my @master = readline $mfh; chomp @master;
	foreach (@i)
		{ print $Lfh "no $_\n" unless any { /'$_'/ } @master; }
	# test greedy any, before, after
	$YAY++;
}
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
sub xtrac
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
	my ($i) = @_;
	print $Lfh "ping\n";
	my $archive = Archive::Any->new($i);
	if ($archive->is_naughty)
		{ print $Lfh "ALERT xtrac naughty $i"; next; }
	my @files = $archive->files;
	print $Lfh @files;
	$archive->extract($DUMP);
	XS($DUMP, $NFSPATH) && rmtree($DUMP);
	mkdir $DUMP;
	print $Lfh "YAY $i\n"; $YAY++;
}
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
