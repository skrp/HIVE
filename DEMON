#!/usr/local/bin/perl
# use FREEBSD::unix_or_you_a_bitch_ass_scrub_hackjob_button-smasher-hack-hacker;
use strict; use warnings;

use Const::Fast 'const';
use Digest::SHA 'sha256_hex';
use POSIX;
use File::Path;
use File::Copy;
use File::LibMagic;
use Sys::Hostname 'hostname';
use LWP::UserAgent;
use LWP::Protocol::https;
use Archive::Any;

########################################################
# DEMON          t_'(o_0)"'      daemon summons scroll #
#                       ^[[acii demon flip'n u off]]   #
########################################################

# Mastercraftsman daemon spawn
# Honored by age & successes
# Power when a life
# Never forgotten ever rewarded
# $sha256_family the reward
# $sha256_family++ if $sha256();
# Core code the oldest & most successful
# With plenty of unsuccessful bastards
# Robustness the stable staple
# Action explicit code
# Programmed only oldest survive

# STRUCT
# /tmp/$NAME/dump/ : hostside work dir
# /nfs/que/ : api que
# /nfs/node/ : daemon dir by host
# /nfs/node/pid : $host_$pid
# /nfs/node/DIO : DEMON CHK-IN CHK-OUT
# /nfs/cemetery/ : tombstone() dead DEMON logs
# /nfs/cemetery/clone : code name sha256
# /nfs/pool/ : XS()
# /nfs/g/ : XS()

# LOGIC
#	-que

# HOST-AWARENESS
#	-log_begin()

# NET-COMM [[ pause, kill, stdout, PID, host_side-dump, bandwidth ]]
#	-nfsn   network_input
#	-nfso   network_output
#	-nfsc   network_command

my ($nfspath) = @ARGV;
 if (not defined $nfspath) { die ('NO arg1 nfs dir'); }
 if (substr($nfspath, -1) ne "/") { $nfspath .= '/'; }
 
# BIRTH ##############################################
die "STILLBORN" if ((my $birth = daemon()) != 0);

# GLOBAL CONST #######################################
const my $NFSPATH => $nfspath;
const my $NAME => name();
const my $DUMP => $NAME.'_dump/';
const my $POOL => $NFSPATH.'pool/';
const my $G => $NFSPATH.'g/';
const my $NODE => hostname();
const my $QUE => $NFSPATH.'node/'.$NODE.'/';
const my $TOMB => $NFSPATH.'cemetery/';
const my $NFSPID => $NFSPATH.'node/pid/'.$$;

const my $TODO => $TOMB.'TODO_'.$NAME;
const my $DONE => $TOMB.'DONE_'.$NAME;
const my $FAIL => $TOMB.'FAIL_'.$NAME;
const my $SHELL => $TOMB.'SHELL_'.$NAME;
const my $REP => $TOMB.'REP_'.$NAME;
const my $RAW => $TOMB.'RAW_'.$NAME;
const my $ZOMBIE => $TOMB.'ZOMBIE_'.$NAME;

const my $SLEEP => $TOMB.'SLEEP';
const my $SUICIDE => $TOMB.'SUICIDE';
const my $DIO => $NFSPATH.'node/DIO';

const my $BIRTH => time();
const my $RATE => 100;

# dispatch table
const my %api_hash => ( get => \&get, xtrac => \&xtrac, blkr => \&blkr, krip => \&krip, regx => \&regex, sha => /&sha );
const my @API => ('get','blkr','sha', 'krip', 'xtrac', 'regx'); 
const my $UA => uagent();
const my $SIZE => 128000;

const my @pf => ('PID_LOG_packets_raw', 'PID_LOG_invalid_input', 'PID_LOG_invalid_output', 'PID_LOG_packet_io', 'PID_LOG_net_io');
const my @dtrace => ('PID_LOG_cpu_io', 'PID_LOG_fs_io', 'PID_LOG_syscall_io');
const my @unix => ('PID_LOG_top', 'PID_LOG_ps', 'PID_LOG_netstat', 'PID_LOG_zfs', 'PID_LOG_gpart', 'PID_LOG_camcontrol', 'PID_LOG_iostat', 'PID_LOG_io');

# GLOBAL VARIABLE ####################################
my $YAY = 0;

# PREP ###############################################
chdir('/tmp/');

# [[ nfso ]] #########################################
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# log_begin();
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

$SIG{INT} = \&SUICIDE;
$SIG{HUP} = \&que_up;

mkdir $DUMP or die "$DUMP FAIL\n";

open(my $Lfh, '>>', $RAW);
open(my $FAILfh, '>>', $FAIL);
open(my $DONEfh, '>>', $DONE);
open(my $TODOfh, '>>', $TODO);
$Lfh->autoflush(1);
$FAILfh->autoflush(1);
$DONEfh->autoflush(1);
$TODOfh->autoflush(1);

print $Lfh "nfs_pid() error\n" unless nfs_pid();

ping(); # host roster
dio('IN'); # net roster

# LIVE ################################################
printf $Lfh ("HELLOWORLD %s\n", TIME());
while (1)
{
	my $que = que_up();
	unless (-e $que)
		{ sleep 3600; next; }

# [[ nfsn ]] #########################################
	open(my $qfh, '<', $que);
	my @QUE = readline $qfh; chomp @QUE;
	my $api = shift @QUE;

# [[ nfsc ]] #########################################
	# chk api_valid
	# chk que_file valid)

	next if (que_verify($api, $que, $qfh) < 0);
	close $qfh;

	my $ttl = @QUE;
	print $Lfh "ttl $ttl loc $QUE api $api\n";

	my $count = 0;
	foreach my $i (@QUE)
	{
		if (-e $SUICIDE)
    			{ SUICIDE(); }
		if (-e $SLEEP)
   	 		{ SLEEP(); }

		print $Lfh "$i\n";
		 if ($api_hash{$api}->($i) != 0)
			{ print $FAILfh "$i\n"; next; }
		print $DONEfh "$i success\n";

		$count++;
		if ($count % $RATE == 0)
		{
			tombstone($api, $count, $ttl);
			open(my $TODOfh, '>', $TODO);
			print $TODOfh @QUE; close $TODOfh;
			print $Lfh "nfs_pid() error\n" unless nfs_pid();
		}

	}
	unlink $TODO;
}

# STRUCT #######################################################
sub daemon {
   die "FAIL daemon1 $!\n" if ((my $pid = fork()) < 0);
   if ($pid != 0)
   	{ exit(0); }
   POSIX::setsid() or die "FAIL setsid $!";
   die "FAIL daemon2 $!\n" if ((my $pid2 = fork()) < 0);
   if ($pid2 != 0)
   	{ exit(0); }
   chdir('/tmp');
   umask 0;
   my $fds = 3;
   while ($fds < 1024)
      { POSIX::close($fds); $fds++;  }
   my $des = '/dev/null';
   open(STDIN, "<$des");
   open(STDOUT, ">$des");
   open(STDERR, ">$des");
   return 0;
}
sub que_verify
{
	my ($api, $que, $qfh) = @_;

	for my $api_value (@API)
	{
		if ($api =~ m/$b/)
			{ return 0; }
	}
	print $Lfh "FAIL_API $api\n";
	close $qfh;
	return -1;
}
sub SUICIDE
{
	my ($api, $count, $ttl) = @_;
	unlink $SUICIDE;
	printf $Lfh ("FKTHEWORLD %s\n", TIME());
	dio('OUT');
	tombstone($api, $count, $ttl);
	exit;
}
sub SLEEP
{
	my ($api, $count, $ttl) = @_;
	open(my $Sfh, '<', $SLEEP);
	my $timeout = readline $Sfh; chomp $timeout;
	print $Lfh ("$SLEEP %s %s\n", $timeout, TIME());
	close $Sfh; unlink $SLEEP;
	tombstone($api, $count, $ttl);
	sleep $timeout;
}
sub TIME
{
	my $t = localtime;
	my $mon = (split(/\s+/, $t))[1];
	my $day = (split(/\s+/, $t))[2];
	my $hour = (split(/\s+/, $t))[3];
	my $time = $mon.'_'.$day.'_'.$hour;
	return $time;
}
sub name
{
	my $id = int(rand(999));
	my $name = $NODE.'_'.$$.'_'.$id;
	return $name;
}
sub tombstone
{
	my ($api, $count, $ttl) = @_;

	open(my $LLfh, '<', $TOMB);
	my @llfh = readline $LLfh;
	my @yay = grep { /^YAY / } @llfh;
	my $yay = @yay;
	my @FACE;
	$FACE[0] = $NAME;
	my $Ttime = time();
	$FACE[1] = ((($Ttime - $BIRTH)/60)/60);
	$FACE[2] = $api.'_'.$yay.'_'.$count.'_'.$ttl;

	open(my $Tfh, '>>', $TOMB);
	printf $Tfh ("%d %s %d %s\n", $YAY, $FACE[0], $FACE[1], $FACE[2]);
}
sub que_up
{
	opendir(my $dh, $QUE);
	my @ls = readdir($dh);
	my $que_path = $QUE.$ls[2];
	return $que_path; # skip $ls[0] = . ; $ls[1] = ..;
	
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	# stop que, close up que, work new que
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
# AWARENESS ####################################################
sub log_begin
{
	for my $script (@pf)
		{ `perl $script $NAME &`; }
	for my $script (@dtrace)
		{ `perl $script $NAME &`; }
	for my $script (@unix)
		{ `perl $script $NAME &`; }
}
# COMMUNICATION ###############################################
sub ping
{
	open(my $Pfh, '>>', '/tmp/PING');
	printf $Pfh "%ld %s ping!\n", time(), $$;
	close $Pfh;
}
sub dio
{
	my $dstatus = (@_);
	open(my $Dfh, '>>', $DIO);
	printf $Dfh ("%s %s %s\n", TIME(), $NAME, $dstatus);
	close $Dfh;
}
sub nfs_pid
{
	open(my $PIDfh, '>', $NFSPID);
	print $PIDfh "$$\n";
	close $PIDfh;
	return 0;
}
sub XS
{
	my ($file) = shift;
	my ($sha) = file_digest($file) or die "couldn't sha $file";
	File::Copy::copy($file, $POOL.$sha);
	my $cur = $G.$sha;
	open(my $fh, '>>', $cur) or die "Meta File Creation FAIL $file";
	printf $fh "%s\n%s\n%s\n%s\n", 
		xsname($file),
		xspath($file),
		xssize($file),
		file_mime_encoding($file);
}
sub file_digest {
	my ($file) = @_;
	my $digester = Digest::SHA->new('sha256');
	$digester->addfile( $file, 'b' );
	return $digester->hexdigest;
}
sub xsname {
	my ($file) = @_;
	$file =~ s?^.*/??;
	return $file;
}
sub xspath {
	my ($file) = @_;
	$file =~ s?/?_?g;
	return $file; 
}
sub file_mime_encoding {
	my ($file) = @_;
	my $magic = File::LibMagic->new();
	my $info = $magic->info_from_filename($file);
	my $des = $info->{description};
	$des =~ s?[/ ]?.?g;
	$des =~ s/,/_/g;
	my $md = $info->{mime_type};
	$md =~ s?[/ ]?.?g;
	my $enc = sprintf("%s %s %s", $des, $md, $info->{encoding}); 
	return $enc;
}
sub xssize {
	my ($file) = @_;
	my $size = -s $file;
	return $size;
}
sub uagent
{
	my $s_ua = LWP::UserAgent->new(
		agent => "Mozilla/50.0.2",
		from => 'punxnotdead',
		timeout => 45,
	);
	return $s_ua;
}
# LOGIC ####################################################
sub get
{
	my ($i) = @_;
	my $tmp = $DUMP.$i;
	my $response = $UA->get($i, ':content_file'=>"$tmp");
	print $Lfh "YAY $i\n"; $YAY++;
	next unless (-e $tmp);
	XS($tmp) && unlink($tmp);
}
sub blkr
{
	my ($i) = @_;
	my $block = 0;
	my $ipath = $NFSPATH.'pool/'.$i;
	open(my $ifh, '<', "$ipath") || print $Lfh "Cant open $i: $!\n";
	binmode($ifh);
	
	while (read($ifh, $block, $SIZE))
	{
		my $bsha = sha256_hex($block);
		my $bname = $NFSPATH.'sea/'.$bsha;
		open(my $fh, '>', "$bname");
		binmode($fh);
		print $fh $block;
		key($i, $bsha);
	}
	$YAY++;
}
sub key
{
	my ($i, $bsha) = @_;
	my $kpath = $NFSPATH.'key/'.$i;
	open(my $kfh, '>>', "$kpath");
	print $kfh "$bsha\n";
}
sub sha
{
	my ($i) = @_;
	my ($sha) = file_digest($i);
	if ($sha ne $i)
		{ print $Lfh "ERK $i ne $sha\n"; }
	$YAY++;
}
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
sub regx
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
	my ($i) = @_;
	open(my $fh, '<', $i); 
	open(my $mfh, '<', $NFSPATH);
	my @i = readline $fh; chomp @i;
	my @master = readline $mfh; chomp @master;
	foreach (@i)
		{ print $Lfh "no $_\n" unless any { /'$_'/ } @master; }
	# test greedy any
	# test greedy before
	# test greedy after
	$YAY++;
}
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
sub xtrac
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
	my ($i) = @_;
	print $Lfh "ping\n";
	my $archive = Archive::Any->new($i);
	if ($archive->is_naughty)
		{ print $Lfh "ALERT xtrac naughty $i"; next; }
	my @files = $archive->files; 
	print $Lfh @files;
	$archive->extract($DUMP);
	XS($DUMP, $NFSPATH) && rmtree($DUMP);
	mkdir $DUMP;
	print $Lfh "YAY $i\n"; $YAY++;
}
