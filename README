#############################
# DEMON - unix daemon network
task -> split into segments
DEMON->(segment_no, code)


# PROCESS ###################
ADMIN -> posts (ACTION @IT RACE) -> HOST_IN_FIFO
  HOST  - prepares DEMON code
HOST -> posts (code_location) -> BROOD_IN_FIFO
  BROOD - prepares & births DEMON
BROOD -> posts (@FACE) -> ADMIN_IN_FIFO

ADMIN: creator
HOST: code spawner
BROOD: DEMON spawner
ACTION: what is done over iterations
@ITER: array of work to be done
RACE: code version
@FACE: DEMON attributes

# HIVE STRUCTURE ###################################
 
[ ==== /bin /pool /sea /g /k /log /tombstone ===== ]
[ ===================== scp ====================== ]
[ =================== ZFS NFS ==================== ]
^^      vv     ^^^     vv     ^
^^      vv     ^
^^      vv     ^
**********     
** /tmp **
** bee5 **
**********
** host **
*#######**
*# API #**
*#######**
**********
  |     |
  | UDP |
|         |
( dynamic code )
( actor @iterations )

# OLD ##############################################







#########################
# HIVE - MINION FRAMEWORK
# ACTORS ################
HOST - daemon code brewery
BROOD - daemon creation
HIVE - daemon uniq dir for minion
# IPC ##################
POST - write fifo
WORD - read fifo

admin 
    POST - ACTOR, @IT, CODE_VERSION to HOST
    WORD - status from all daemons
HOST
    POST - $new_code to BROOL
    WORD - set info from admin
BROOD
    POST - status to admin
    WORD - $new_code location from HOST
MINION
    POST - status to admin
    WORD - new set infom from admin
# CODE ###################
ACTOR - the set's uniq expression
@IT - set's iteration array
CODE - version specified to work over the array 

1) admin -> posts to HOST
    ACTOR = array action
    @IT = array
    VERSION = 'CODE_VERSION'
  
 2a) HOST -> reads fifo, compiles: CODE_VERSION, ACTOR, @ IT
 2b) HOST posts($new_code) to write fifo
 
 3a) BROOD reads fifo, births daemon with $new_code
 
 4a) Daemon is created in its uniq directory and works over set
